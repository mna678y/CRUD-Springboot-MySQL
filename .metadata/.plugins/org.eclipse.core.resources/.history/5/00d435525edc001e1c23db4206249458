package com.genesis.controller;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.genesis.config.JwtTokenUtil;
import com.genesis.exception.AppException;
import com.genesis.model.ApiResponse;
import com.genesis.model.ClientEntity;
import com.genesis.model.JwtRequest;
import com.genesis.model.JwtResponse;
import com.genesis.model.ResponseCode;
import com.genesis.service.JwtUserDetailsService;
import com.genesis.service.TestRepo;
import com.genesis.util.BankNames;
import com.genesis.util.Utilities;

@RestController
@CrossOrigin
public class AuthController {

	private static final Logger logger = LoggerFactory.getLogger(AuthController.class);
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private JwtTokenUtil jwtTokenUtil;
	@Autowired
	private JwtUserDetailsService userDetailsService;
	@Autowired
	private Utilities utilities;

	@Transactional
	@RequestMapping(value = "/oath/token", method = RequestMethod.POST)
	public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest,
			HttpServletRequest request) throws Exception {

		// UserDetails userDetails =
		// userDetailsService.loadUserByUsername(authenticationRequest.getCnic());
		JwtResponse apiResponse = new JwtResponse();
		ApiResponse response = new ApiResponse();
		String clientTitle = "";
		try {
			logger.info("Token Request received from ip address : " + utilities.extractIPAddress(request));
			try {
				if (!authenticationRequest.getName()
						.equalsIgnoreCase(BankNames.valueOf(authenticationRequest.getName()).getBankName())) {
					response.setMessage("INVALID_USER");
					response.setCode(ResponseCode.INVALID_USER.getCode());
					return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(response);
				}
			} catch (IllegalArgumentException e) {
				response.setMessage("INVALID_USER");
				response.setCode(ResponseCode.INVALID_USER.getCode());
				return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(response);
			} catch (NullPointerException e) {
				response.setMessage("INVALID_USER");
				response.setCode(ResponseCode.INVALID_USER.getCode());
				return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(response);
			}

			ClientEntity clientObj = userDetailsService.getUserCnic(authenticationRequest.getClientCode());
			if (clientObj == null) {
				response.setMessage("CLIENT_CODE_NOT_FOUND");
				response.setCode("11");
				return ResponseEntity.ok(response);
			}
			if (clientObj.getIdCardNumber() == null || clientObj.getIdCardNumber().equals("")) {
				response.setMessage("INVALID_CNIC");
				response.setCode("06");
				return ResponseEntity.ok(response);
			}
			clientTitle = clientObj.getClientName();
			authenticationRequest.setCnic(clientObj.getIdCardNumber().replace("-", ""));
			UserDetails userDetails = userDetailsService.findUserOrRegisterByUsername(authenticationRequest);
			authenticate(authenticationRequest.getClientCode(), authenticationRequest.getPassword());
			String token = jwtTokenUtil.generateToken(userDetails);
			userDetailsService.updateToken(userDetails.getUsername(), token);
			apiResponse.setCode(ResponseCode.SUCCESS.getCode());
			apiResponse.setMessage(ResponseCode.SUCCESS.name());
			apiResponse.setClientTitle(clientTitle);
			apiResponse.setCnic(authenticationRequest.getCnic());
			apiResponse.setToken(token);
		} catch (HttpMessageNotReadableException e) {
			e.printStackTrace();
			return null;
		} catch (Exception e) {
			response.setCode(e.getMessage());
			ResponseCode findByName = ResponseCode.findByName(e.getMessage());
			response.setMessage(findByName.name());
			if (findByName.name().equals("ALFA_BANK_ACCT_NOT_FOUND")) {
				response.setMessage("INVALID_CNIC");
				response.setCode(ResponseCode.INVALID_CNIC.getCode());
			}

			return ResponseEntity.ok(response);
		}
		return ResponseEntity.ok(apiResponse);
	}

//	@RequestMapping(value = "/register", method = RequestMethod.POST)
//	public ResponseEntity<?> saveUser(@RequestBody UserDTO user) throws Exception {
//		return ResponseEntity.ok(userDetailsService.save(user));
//	}

	private void authenticate(String username, String password) throws Exception {
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		} catch (DisabledException e) {
			throw new Exception(ResponseCode.USER_EXPIRED.getCode(), e);
		} catch (BadCredentialsException e) {
			throw new Exception(ResponseCode.INVALID_PASSWORD.getCode(), e);
		} catch (AppException e) {
			throw new Exception(ResponseCode.INVALID_CNIC.getCode(), e);
		}
	}

	@Autowired
	TestRepo testRepo;

	@GetMapping("/test/{name}")
	public Object getTest(@PathVariable("name") String name) {
		Object tests = testRepo.getTests(name);
		return tests;
	}

	@GetMapping("/testp/{name}")
	public Object getTestp(@PathVariable("name") String name) {
		Object tests = testRepo.getTestsp(name);
		return tests;
	}

	@GetMapping("/tests/{name}")
	public Object getTests(@PathVariable("name") String name) {
		Object tests = testRepo.getTestss(name);
		return tests;
	}

}