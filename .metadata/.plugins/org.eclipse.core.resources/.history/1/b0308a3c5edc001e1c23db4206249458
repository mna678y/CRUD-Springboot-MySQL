package com.softech.service;

import java.sql.SQLException;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.genesis.dao.ClientDao;
import com.genesis.dao.UserDao;
import com.genesis.exception.AppException;
import com.genesis.model.ApiUser;
import com.genesis.model.ClientEntity;
import com.genesis.model.JwtRequest;
import com.genesis.model.ProcessResponse;
import com.genesis.model.ResponseCode;
import com.genesis.model.UserDTO;

@Service
public class JwtUserDetailsService implements UserDetailsService {

	@Autowired
	private UserDao userDao;

	@Autowired
	private ClientDao clientDao;
	
	@Autowired
	private ClaBankService claBankService;

	@Autowired
	private PasswordEncoder bcryptEncoder;

	@Value("${ktrade_pass}")
	private String password;

	private static Logger _log = LoggerFactory.getLogger(JwtUserDetailsService.class);

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		ApiUser user = userDao.findByClientCode(username);
		if (user == null) {

			// throw new UsernameNotFoundException("User not found with
			// username: " + username);
			throw new UsernameNotFoundException(ResponseCode.ALFA_BANK_ACCT_NOT_FOUND.getCode());
		}
		return new org.springframework.security.core.userdetails.User(user.getClientCode(), user.getPassword(),
				new ArrayList<>());
	}

	public ApiUser save(UserDTO user) {
		ApiUser newUser = new ApiUser();
		newUser.setCnic(user.getCnic());
		newUser.setPassword(bcryptEncoder.encode(password));
		return userDao.save(newUser);
	}


	public UserDetails findUserOrRegisterByUsername(JwtRequest request) throws UsernameNotFoundException {
		
		//createGuestUser(request);
		
		//ApiUser user = userDao.findByCnic(request.getCnic());
		ApiUser user = userDao.findByClientCode(request.getClientCode());
		
		ProcessResponse bankAccount = claBankService.findBankAcctByCnic(request.getCnic());
		//ProcessResponse bankAccount = new ProcessResponse() ;       
		//bankAccount.setResult("4000100185222");
		//bankAccount.setResponseCode(ResponseCode.SUCCESS);
		

		// User not found in DB?
		if (bankAccount.getResponseCode() != ResponseCode.SUCCESS) {
			throw new AppException(bankAccount.getResponseCode().getCode());
		}

		// User not found in DB?
		if (user == null) {
			// found Bank Account, lets create API User
			if (bankAccount.getResult() != null && !bankAccount.getResult().isEmpty()) {

				_log.info("Creating new User CNIC: {},  BankAcc: {}", request.getCnic(), bankAccount.getResult());

				user = new ApiUser();
				user.setCnic(request.getCnic());
				user.setPassword(bcryptEncoder.encode(password));
				user.setClientCode(request.getClientCode());

				if (bankAccount.getResult() != null && !bankAccount.getResult().isEmpty()) {
					user.setAccounts(Arrays.asList(bankAccount.getResult().split("\\s*,\\s*")));
				}
				ProcessResponse userId = claBankService.findUserIdByBank(user.getAccounts().get(0));
				ProcessResponse clientCode = claBankService.findClientCodeByBank(user.getAccounts().get(0));

				//_log.info("UserID: {},  clientCode: {}", userId.getResult(), clientCode.getResult());

				userDao.save(user);
			} else {
				throw new AppException(ResponseCode.ALFA_BANK_ACCT_NOT_FOUND.getCode());
			}
			// if (user == null) {
			// throw new UsernameNotFoundException("User not found with
			// username: " + request.getCnic());
			// }
		}

		return new org.springframework.security.core.userdetails.User(user.getClientCode(), user.getPassword(),
				new ArrayList<>());
	}

	
	private void createGuestUser(JwtRequest request) {

		ProcessResponse bankAccount = claBankService.checkOrCreate(request.getCnic(), request.getBankAcct(), request.getName());
		// User not found in DB?
		if (bankAccount.getResponseCode() == ResponseCode.GUEST_USER_CREATED) {
			
			ApiUser user = new ApiUser();
			user.setCnic(request.getCnic());
			user.setPassword(bcryptEncoder.encode(password));

			if (bankAccount.getResult() != null && !bankAccount.getResult().isEmpty()) {
				user.setAccounts(Arrays.asList(request.getBankAcct().split("\\s*,\\s*")));
			}
 
			_log.info("Guest Created CNIC: {},  Bank: {}", request.getCnic(), request.getBankAcct());

			userDao.save(user);
			
		}else if (bankAccount.getResponseCode() == ResponseCode.ERROR_DURING_GUEST_CREATION) {
			throw new AppException(bankAccount.getResponseCode().getCode());			
		}
  
 
	}	
	
	public void updateToken(String username, String token) {
		try {
		//userDao.flush();
		ApiUser user = userDao.findByClientCode(username);
		if (user != null) {
			user.setLoginToken(token);
			Instant lastHourInstance = Instant.now().plus(30, ChronoUnit.MINUTES);
			Date toDate = Date.from(lastHourInstance);
			user.setTokenExpiry(toDate);
			//userDao.save(user);
		}
		} catch(Exception ex) {
			System.out.println(ex.getLocalizedMessage());
			System.out.println(ex.getStackTrace());
			System.out.println(ex.toString());
		}
	}

	public ClientEntity getUserCnic(String clientCode)
	{
		try {
		ClientEntity clientObj = clientDao.findByClientCode(clientCode);
		return clientObj;
		}catch(Exception ex)
		{
			System.out.println("----> exception in getUserCnic-"+ex.getMessage());
		}
		return null;
	}
	
}