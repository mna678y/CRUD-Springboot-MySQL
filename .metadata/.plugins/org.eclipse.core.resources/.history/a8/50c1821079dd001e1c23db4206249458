package com.genesis.service.serviceImpl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.genesis.entities.Country;
import com.genesis.entities.Domain;
import com.genesis.entities.University;
import com.genesis.model.HipoLabApiResponse;
import com.genesis.model.ProcessResponse;
import com.genesis.model.UpdateUniRequest;
import com.genesis.repositories.CountryRepository;
import com.genesis.repositories.DomainRepository;
import com.genesis.repositories.UniversityRepository;
import com.genesis.service.UniversityDataService;
import com.genesis.util.Constants;
import com.genesis.util.Utilities;

@Service
public class UniversityDataServiceImpl implements UniversityDataService {

	private static Logger _log = LoggerFactory.getLogger(UniversityDataServiceImpl.class);

	private RestTemplate restTemplate;
	private DomainRepository domainRepository;
	private CountryRepository countryRepository;
	private UniversityRepository universityRepository;

	@Autowired
	public UniversityDataServiceImpl(RestTemplate restTemplate, DomainRepository domainRepository,
			CountryRepository countryRepository, UniversityRepository universityRepository) {
		this.restTemplate = restTemplate;
		this.domainRepository = domainRepository;
		this.countryRepository = countryRepository;
		this.universityRepository = universityRepository;
	}

	@Override
	public ResponseEntity<?> getUniversityData(String countryName) {

		try {
			ProcessResponse processResponse = new ProcessResponse();
			String country = countryName.toLowerCase().trim();
			Optional<Country> countryOpt = countryRepository.findByCountryName(country);
			if (countryOpt.isPresent()) {
				Country countryObj = countryOpt.get();
				List<Domain> domainList = domainRepository.findByCountry(countryObj);
				domainList.stream().forEach(data -> {

				});
			} else {
				processResponse.setResult(Constants.INVALID_COUNTRY_MESSAGE);
				processResponse.setResponseCode(processResponse.getResponseCode().INVALID_COUNTRY);
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(processResponse);
			}
		} catch (Exception ex) {
			_log.error(ex.getMessage());
		}

		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	@Override
	public ResponseEntity<?> createUniversityData(String countryName) {

		ProcessResponse processResponse = new ProcessResponse();
		try {
			boolean existsByCountryName = countryRepository.existsByCountryName(countryName);
			if (existsByCountryName) {
				processResponse.setResult(Constants.COUNTRY_ALREADY_EXIST_MESSAGE);
				processResponse.setResponseCode(processResponse.getResponseCode().COUNTRY_ALREADY_EXISTED);
				return ResponseEntity.status(HttpStatus.CONFLICT).body(processResponse);
			} else {
				String uniApiURL = Constants.UNIVERSITY_API_URL + countryName;
				ResponseEntity<Object> responseEntity = restTemplate.exchange(uniApiURL, HttpMethod.GET, null,
						Object.class);
				if (responseEntity.getStatusCode().equals(HttpStatus.OK)) {
					Object responseBody = responseEntity.getBody();
					if (responseBody != null) {
						List<HipoLabApiResponse> hipoLabApiResponse = Utilities.convertToOriginalObject(responseBody,
								HipoLabApiResponse.class);
						if (!hipoLabApiResponse.isEmpty()) {
							hipoLabApiResponse.stream().forEach(resp -> insertData(resp));
							processResponse.setResult(Constants.DATA_IMPORTED_SUCCESS_MESSAGE);
							processResponse.setResponseCode(processResponse.getResponseCode().SUCCESS);
							return ResponseEntity.status(HttpStatus.CREATED).body(processResponse);
						} else {
							processResponse.setResult(Constants.INVALID_COUNTRY_MESSAGE);
							processResponse.setResponseCode(processResponse.getResponseCode().INVALID_COUNTRY);
							return ResponseEntity.status(HttpStatus.NOT_FOUND).body(processResponse);
						}
					}
				}
			}
		} catch (Exception ex) {
			_log.error(ex.getMessage());
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	@Transactional(rollbackFor = Exception.class)
	public void insertData(HipoLabApiResponse apiData) {

		Country country = new Country();
		country.setCountryCode(apiData.getCountryCode());
		country.setCountryName(apiData.getCountry());
		countryRepository.save(country);

		University university = new University();
		university.setUniversityName(apiData.getUniversityName());
		university.setState(apiData.getStateProvince());
		university.setWebsite(apiData.getWebPageModel().get(0));
		university.setCountryCode(country);
		universityRepository.save(university);

		for (String domainName : apiData.getDomains()) {
			Domain domain = new Domain();
			domain.setDomainName(domainName);
			domain.setUniversity(university);
			domain.setCountry(country);
			domainRepository.save(domain);
		}
	}

	@Override
	public ResponseEntity<?> modifyUniversityData(UpdateUniRequest updateUniRequest, Long universityId) {

		ProcessResponse processResponse = new ProcessResponse();
		try {
			String country = updateUniRequest.getCountry().toLowerCase().trim();
			Optional<Country> countryOpt = countryRepository.findByCountryName(country);
			if (countryOpt.isPresent()) {

				Country countryObj = countryOpt.get();
				Optional<University> uniOpt = universityRepository.findByIdAndCountryCode(universityId, countryObj);
				if (uniOpt.isPresent()) {

					University universityObj = uniOpt.get();
					universityObj.setWebsite(updateUniRequest.getWebsite());
					universityRepository.save(universityObj);

					processResponse.setResult(Constants.UPDATE_UNI_DATA_SUCCESS_MESSAGE);
					processResponse.setResponseCode(processResponse.getResponseCode().SUCCESS);
					return ResponseEntity.status(HttpStatus.OK).body(processResponse);

				} else {
					processResponse.setResult(Constants.INVALID_UNIVERSITY_MESSAGE);
					processResponse.setResponseCode(processResponse.getResponseCode().INVALID_UNIVERSITY);
					return ResponseEntity.status(HttpStatus.NOT_FOUND).body(processResponse);
				}

			} else {
				processResponse.setResult(Constants.INVALID_COUNTRY_MESSAGE);
				processResponse.setResponseCode(processResponse.getResponseCode().INVALID_COUNTRY);
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(processResponse);
			}
		} catch (Exception ex) {
			_log.error(ex.getMessage());
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

}