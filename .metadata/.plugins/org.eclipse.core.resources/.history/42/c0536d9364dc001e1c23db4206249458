package com.genesis.controller;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.genesis.config.RequestContextBuilder;
import com.genesis.context.ApiRequestContext;
import com.genesis.model.CashDepositRequest;
import com.genesis.model.CashDepositResponse;
import com.genesis.model.ClientEntity;
import com.genesis.model.ProcessResponse;
import com.genesis.model.ResponseCode;
import com.genesis.service.ClaBankService;
import com.genesis.service.JwtUserDetailsService;
import com.genesis.util.Utilities;

@RestController
public class UniversityController {

	@Autowired
	RequestContextBuilder contextBuilder;
	@Autowired
	ClaBankService claBankService;
	@Autowired
	private JwtUserDetailsService userDetailsService;
	@Autowired
	private Utilities utilities;

	private static Logger _log = LoggerFactory.getLogger(UniversityController.class);

	@RequestMapping({ "/depositCash" })
	public CashDepositResponse depositCash(@RequestBody CashDepositRequest cashDepositRequest,
			HttpServletRequest request) {
		try {
			ApiRequestContext context = contextBuilder.buildRequestContext();
			CashDepositResponse resp = new CashDepositResponse();
			_log.info("Deposit Context {}", context.getUser());
			_log.info("Deposit request received from ip address {}", utilities.extractIPAddress(request));
			ClientEntity clientObj = userDetailsService.getUserCnic(cashDepositRequest.getClientCode());
			if (clientObj != null) {
				String userCnic = clientObj.getIdCardNumber().replace("-", "");
				cashDepositRequest.setCnic(userCnic);
			}
			if (!context.getUser().getCnic().equalsIgnoreCase(cashDepositRequest.getCnic())) {
				resp.setMessage(ResponseCode.INVALID_TOKEN.name());
				resp.setCode(ResponseCode.INVALID_TOKEN.getCode());
				return resp;
			} else {
				ProcessResponse apiResponse = claBankService.processCashDeposit(cashDepositRequest);
				String procResponse = apiResponse.getResult();
				if (procResponse.equals("05")) {
					procResponse = "059";
				} else if (procResponse.equals("07") || procResponse.equals("11") || procResponse.equals("13")
						|| procResponse.equals("14") || procResponse.equals("15") || procResponse.equals("16")) {

					procResponse = "060";
				} else if (procResponse.equals("12") || procResponse.equals("17") || procResponse.equals("18")
						|| procResponse.equals("19")) {

					procResponse = "058";
				}
				ResponseCode findByName = ResponseCode.findByName(procResponse);
				resp.setMessage(findByName.name());
				resp.setCode(procResponse);
				return resp;
			}
		} catch (HttpMessageNotReadableException e) {
			e.printStackTrace();
			return null;
		}
	}

}